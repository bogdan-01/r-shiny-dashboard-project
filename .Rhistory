library(synthpop)
library(tidyverse)
read_csv("ga_data_final.csv")
ga_data_raw <- read_csv("ga_data_final.csv")
View(ga_data_raw)
View(ga_data_raw)
#Synthesize
#choosing which variables we want to synthesize. For example, we exclude date from the synthesis as we want those to be the same as in the original data frame.
ga_data_syn <- syn(ga_data_raw, visit.sequence = c("sessions", "users", "data_application", "glasgow_info_session", "ed_info_sessions", "programming_applications"))
#Synthesize
#choosing which variables we want to synthesize. For example, we exclude date from the synthesis as we want those to be the same as in the original data frame.
ga_data_syn <- syn(ga_data_raw, visit.sequence = c("sessions", "users", "data_application", "glasgow_info_session", "ed_info_sessions", "programming_application"))
View(ga_data_syn)
#extract the dataset
synthesized_ga_data <- ga_data_syn$syn
View(synthesized_ga_data)
#compare statistics
summary(ga_data_raw)
summary(synthesized_ga_data)
#plot the comparisons
compare(ga_data_raw, synthesized_ga_data)
#plot the comparisons
compare(ga_data_raw, ga_data_syn)
#plot the comparisons
compare(ga_data_syn, ga_data_raw)
ggplot(ga_data_raw, aes(date, users)) +
geom_line()
ggplot(ga_data_raw, aes(date, sessions)) +
geom_line()
ggplot(ga_data_raw, aes(date, data_application)) +
geom_bar()
ggplot(ga_data_raw, aes(data_application)) +
geom_bar()
ggplot(ga_data_raw, aes(data_application)) +
geom_histogram()
ggplot(ga_data_raw, aes(date, data_application)) +
geom_line()
ggplot(ga_data_raw, aes(date, programming_application)) +
geom_line()
ggplot(synthesized_ga_data, aes(date, programming_application)) +
geom_line()
#as you can see, the data has been synthesized successfully as we can see different values, especially the ones above a value of 1.
#export to csv (then rename "api_call_data_wrangle" to "data_wrangle" as you are no longer doing an api call). Then replace the api call in there with a read_csv line.
write_csv(synthesized_ga_data, "synthesizes_ga_data")
#as you can see, the data has been synthesized successfully as we can see different values, especially the ones above a value of 1.
#export to csv (then rename "api_call_data_wrangle" to "data_wrangle" as you are no longer doing an api call). Then replace the api call in there with a read_csv line.
write_csv(synthesized_ga_data, "synthesized_ga_data")
#as you can see, the data has been synthesized successfully as we can see different values, especially the ones above a value of 1.
#export to csv (then rename "api_call_data_wrangle" to "data_wrangle" as you are no longer doing an api call). Then replace the api call in there with a read_csv line.
write_csv(synthesized_ga_data, "synthesized_ga_data.csv")
View(ga_data_raw)
library(googleAnalyticsR)
library(lubridate)
library(tidyverse)
library(tsibble)
library(tsibbledata)
ga_auth()
ga_data <- google_analytics(my_ga_id,
date_range = c("2019-01-01", today()),
metrics = c("sessions",
"users",
"goal2Completions",
"goal3Completions",
"goal5Completions",
"goal9Completions"),
dimensions = c("date", "latitude", "longitude", "city"),
anti_sample = TRUE)
ga_auth()
#Select the one you want to work with
my_ga_id <- 102407343
ga_data <- google_analytics(my_ga_id,
date_range = c("2019-01-01", today()),
metrics = c("sessions",
"users",
"goal2Completions",
"goal3Completions",
"goal5Completions",
"goal9Completions"),
dimensions = c("date", "latitude", "longitude", "city"),
anti_sample = TRUE)
View(ga_data)
write_csv(ga_data, "ga_data_raw.csv")
#create
ga_data_raw <- read_csv("ga_data_raw.csv")
#create
ga_data_raw <- read_csv("ga_data_raw.csv")
View(ga_data_raw)
#Synthesize
#choosing which variables we want to synthesize. For example, we exclude date from the synthesis as we want those to be the same as in the original data frame.
ga_data_syn <- syn(ga_data_raw, visit.sequence = c("sessions", "users", "goal2Completions", "goal3Completions", "goal5Completions", "goal9Completions"))
#extract the dataset into a data frame
synthesized_ga_data <- ga_data_syn$syn
#compare statistics
summary(ga_data_raw)
summary(synthesized_ga_data)
#plot the comparisons
compare(ga_data_syn, ga_data_raw)
#plot 2 different graphs to compare raw vs synthesized data
ggplot(ga_data_raw, aes(date, goal9Completions)) +
geom_line()
ggplot(synthesized_ga_data, aes(date, goal9Completions)) +
geom_line()
#as you can see, the data has been synthesized successfully as we can see different values, especially the ones above a value of 1.
#export to csv (then rename "api_call_data_wrangle" to "data_wrangle" as you are no longer doing an api call). Then replace the api call in there with a read_csv line.
#remove ga_data_final.csv from the project folder you created as you no longer need it and you don't want to upload that to github as it has original data.
write_csv(synthesized_ga_data, "synthesized_ga_data.csv")
#as you can see, the data has been synthesized successfully as we can see different values, especially the ones above a value of 1.
#export to csv (then rename "api_call_data_wrangle" to "data_wrangle" as you are no longer doing an api call). Then replace the api call in the data_wrangle file (as seen below) with a read_csv line.
# ga_data <- google_analytics(my_ga_id,
#                            date_range = c("2019-01-01", today()),
#                            metrics = c("sessions",
#                                        "users",
#                                        "goal2Completions",
#                                        "goal3Completions",
#                                        "goal5Completions",
#                                        "goal9Completions"),
#                            dimensions = c("date", "latitude", "longitude", "city"),
#                            anti_sample = TRUE)
#remove ga_data_final.csv from the project folder you created as you no longer need it and you don't want to upload that to github as it has original data.
write_csv(synthesized_ga_data, "synthesized_ga_data.csv")
source('~/codeclan_work/dashboard_project/data_wrangle.R', echo=TRUE)
source('~/codeclan_work/dashboard_project/data_wrangle.R', echo=TRUE)
read_csv(ga_data, "synthesized_ga_data.csv")
read_csv(ga_data, "synthesized_ga_data.csv")
