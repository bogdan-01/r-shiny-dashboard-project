library(synthpop)
library(tidyverse)
read_csv("ga_data_final.csv")
ga_data_raw <- read_csv("ga_data_final.csv")
View(ga_data_raw)
View(ga_data_raw)
#Synthesize
#choosing which variables we want to synthesize. For example, we exclude date from the synthesis as we want those to be the same as in the original data frame.
ga_data_syn <- syn(ga_data_raw, visit.sequence = c("sessions", "users", "data_application", "glasgow_info_session", "ed_info_sessions", "programming_applications"))
#Synthesize
#choosing which variables we want to synthesize. For example, we exclude date from the synthesis as we want those to be the same as in the original data frame.
ga_data_syn <- syn(ga_data_raw, visit.sequence = c("sessions", "users", "data_application", "glasgow_info_session", "ed_info_sessions", "programming_application"))
View(ga_data_syn)
#extract the dataset
synthesized_ga_data <- ga_data_syn$syn
View(synthesized_ga_data)
#compare statistics
summary(ga_data_raw)
summary(synthesized_ga_data)
#plot the comparisons
compare(ga_data_raw, synthesized_ga_data)
#plot the comparisons
compare(ga_data_raw, ga_data_syn)
#plot the comparisons
compare(ga_data_syn, ga_data_raw)
ggplot(ga_data_raw, aes(date, users)) +
geom_line()
ggplot(ga_data_raw, aes(date, sessions)) +
geom_line()
ggplot(ga_data_raw, aes(date, data_application)) +
geom_bar()
ggplot(ga_data_raw, aes(data_application)) +
geom_bar()
ggplot(ga_data_raw, aes(data_application)) +
geom_histogram()
ggplot(ga_data_raw, aes(date, data_application)) +
geom_line()
ggplot(ga_data_raw, aes(date, programming_application)) +
geom_line()
ggplot(synthesized_ga_data, aes(date, programming_application)) +
geom_line()
#as you can see, the data has been synthesized successfully as we can see different values, especially the ones above a value of 1.
#export to csv (then rename "api_call_data_wrangle" to "data_wrangle" as you are no longer doing an api call). Then replace the api call in there with a read_csv line.
write_csv(synthesized_ga_data, "synthesizes_ga_data")
#as you can see, the data has been synthesized successfully as we can see different values, especially the ones above a value of 1.
#export to csv (then rename "api_call_data_wrangle" to "data_wrangle" as you are no longer doing an api call). Then replace the api call in there with a read_csv line.
write_csv(synthesized_ga_data, "synthesized_ga_data")
#as you can see, the data has been synthesized successfully as we can see different values, especially the ones above a value of 1.
#export to csv (then rename "api_call_data_wrangle" to "data_wrangle" as you are no longer doing an api call). Then replace the api call in there with a read_csv line.
write_csv(synthesized_ga_data, "synthesized_ga_data.csv")
View(ga_data_raw)
library(googleAnalyticsR)
library(lubridate)
library(tidyverse)
library(tsibble)
library(tsibbledata)
ga_auth()
ga_data <- google_analytics(my_ga_id,
date_range = c("2019-01-01", today()),
metrics = c("sessions",
"users",
"goal2Completions",
"goal3Completions",
"goal5Completions",
"goal9Completions"),
dimensions = c("date", "latitude", "longitude", "city"),
anti_sample = TRUE)
ga_auth()
#Select the one you want to work with
my_ga_id <- 102407343
ga_data <- google_analytics(my_ga_id,
date_range = c("2019-01-01", today()),
metrics = c("sessions",
"users",
"goal2Completions",
"goal3Completions",
"goal5Completions",
"goal9Completions"),
dimensions = c("date", "latitude", "longitude", "city"),
anti_sample = TRUE)
View(ga_data)
write_csv(ga_data, "ga_data_raw.csv")
#create
ga_data_raw <- read_csv("ga_data_raw.csv")
#create
ga_data_raw <- read_csv("ga_data_raw.csv")
View(ga_data_raw)
#Synthesize
#choosing which variables we want to synthesize. For example, we exclude date from the synthesis as we want those to be the same as in the original data frame.
ga_data_syn <- syn(ga_data_raw, visit.sequence = c("sessions", "users", "goal2Completions", "goal3Completions", "goal5Completions", "goal9Completions"))
#extract the dataset into a data frame
synthesized_ga_data <- ga_data_syn$syn
#compare statistics
summary(ga_data_raw)
summary(synthesized_ga_data)
#plot the comparisons
compare(ga_data_syn, ga_data_raw)
#plot 2 different graphs to compare raw vs synthesized data
ggplot(ga_data_raw, aes(date, goal9Completions)) +
geom_line()
ggplot(synthesized_ga_data, aes(date, goal9Completions)) +
geom_line()
#as you can see, the data has been synthesized successfully as we can see different values, especially the ones above a value of 1.
#export to csv (then rename "api_call_data_wrangle" to "data_wrangle" as you are no longer doing an api call). Then replace the api call in there with a read_csv line.
#remove ga_data_final.csv from the project folder you created as you no longer need it and you don't want to upload that to github as it has original data.
write_csv(synthesized_ga_data, "synthesized_ga_data.csv")
#as you can see, the data has been synthesized successfully as we can see different values, especially the ones above a value of 1.
#export to csv (then rename "api_call_data_wrangle" to "data_wrangle" as you are no longer doing an api call). Then replace the api call in the data_wrangle file (as seen below) with a read_csv line.
# ga_data <- google_analytics(my_ga_id,
#                            date_range = c("2019-01-01", today()),
#                            metrics = c("sessions",
#                                        "users",
#                                        "goal2Completions",
#                                        "goal3Completions",
#                                        "goal5Completions",
#                                        "goal9Completions"),
#                            dimensions = c("date", "latitude", "longitude", "city"),
#                            anti_sample = TRUE)
#remove ga_data_final.csv from the project folder you created as you no longer need it and you don't want to upload that to github as it has original data.
write_csv(synthesized_ga_data, "synthesized_ga_data.csv")
source('~/codeclan_work/dashboard_project/data_wrangle.R', echo=TRUE)
source('~/codeclan_work/dashboard_project/data_wrangle.R', echo=TRUE)
read_csv(ga_data, "synthesized_ga_data.csv")
read_csv(ga_data, "synthesized_ga_data.csv")
library(googleAnalyticsR)
library(lubridate)
library(tidyverse)
library(tsibble)
library(tsibbledata)
read_csv(ga_data, "synthesized_ga_data.csv")
ga_data <- read_csv("synthesized_ga_data.csv")
ga_data <- ga_data %>%
mutate(lat_numeric = as.numeric(latitude),
lng_numeric = as.numeric(longitude)) %>%
filter(lat_numeric > 49.958956,  lat_numeric < 60.914919) %>%
filter(lng_numeric > -8.017032,  lng_numeric < 1.782773)
ga_data <- ga_data %>%
mutate(scottish_city = case_when(lat_numeric > 55.4060 &
lat_numeric < 56.6450 &
lng_numeric < -2.3150 &
lng_numeric > -3.7393 ~ "Edinburgh",
lat_numeric > 54.6141 &
lat_numeric < 56.6450 &
lng_numeric < -3.7393 &
lng_numeric > -5.2901 ~ "Glasgow",
lat_numeric > 56.6450 &
lat_numeric < 60.8532 &
lng_numeric < -0.2994 &
lng_numeric > -9.1667 ~ "Inverness"))
ga_data <- ga_data %>%
rename(data_application = goal2Completions,
glasgow_info_session = goal3Completions,
ed_info_sessions = goal5Completions,
programming_application = goal9Completions)
ga_data_select <- ga_data %>%
select(date,
sessions,
users,
data_application,
programming_application,
ed_info_sessions,
glasgow_info_session,
scottish_city,
latitude,
longitude) %>%
filter(!is.na(scottish_city)) %>%
group_by(scottish_city, date) %>%
summarise(total_sessions_per_day = sum(sessions),
total_users_per_day = sum(users),
total_da_apps = sum(data_application),
total_prog_apps = sum(programming_application),
total_ed_info = sum(ed_info_sessions),
total_gl_info = sum(glasgow_info_session))
ga_tsibble <- as_tsibble(ga_data_select, index = date, key = scottish_city)
# codeclan corporate colour pallete
codeclan_colours <- c(
`codeclan dark blue` = "#1b3445",
`codeclan light blue` = "#4da2cd",
`codeclan other blue` = "#4ca1cd",
`codeclan gold`     = "#e1bf76",
`codeclan pink` = "#e74b7d",
`codeclan red` = "red",
`codeclan light grey` = "#cccccc",
`codeclan dark grey`  = "#8c8c8c")
# Any changes to these colours, or addition of new colours, are done in the above vector.
# Tip: use back ticks to remove naming restrictions (e.g. to include spaces for `light grey` and `dark grey`).
# Function that extracts the hex codes from this vector by name.
codeclan_cols <- function(...) {
cols <- c(...)
if (is.null(cols))
return (codeclan_colours)
codeclan_colours[cols]
}
# This allows us to get hex colors in a robust and flexible way. For example, you can have all colours returned as they are, specify certain colours, in a particular order, add additional function arguments and checks, and so on:
# codeclan_cols()
# codeclan_cols("codeclan gold", "codeclan light blue")
# Combine colours into palettes
# Codeclan has a few main colours, but the full list (above) includes other official colours used for a variety of purposes. So we can now create palettes (various combinations) of these colours. Similar to how we deal with colours, first define a list like such:
codeclan_palettes <- list(
`main`  = codeclan_cols("codeclan light blue", "codeclan dark blue", "codeclan gold"),
`cool`  = codeclan_cols("codeclan dark blue", "codeclan light blue", "codeclan other blue"),
`hot`   = codeclan_cols("codeclan gold", "codeclan red", "codeclan pink"),
`mixed` = codeclan_cols("codeclan gold","codeclan light blue", "codeclan other blue","codeclan dark blue", "codeclan dark grey", "codeclan light grey", "codeclan pink"),
`grey`  = codeclan_cols("codeclan light grey", "codeclan dark grey")
)
codeclan_palettes
# Changes or new colour palettes are added in this list. We write a function to access and interpolate them like so:
# Return function to interpolate a example color palette
#' @param palette Character name of palette in example_palettes
#' @param reverse Boolean indicating whether the palette should be reversed
#' @param ... Additional arguments to pass to colorRampPalette()
codeclan_pal <- function(palette = "main", reverse = FALSE, ...) {
pal <- codeclan_palettes[[palette]]
if (reverse) pal <- rev(pal)
colorRampPalette(pal, ...)
}
# This function gets a pallete by name from the list ("main" by default), has a boolean condition determining whether to reverse the order or not, and additional arguments to pass on to colorRampPallete() (such as an alpha value). This returns another function:
# This returned function will interpolate the palette colours for a certain number of levels, making it possible to create shades between our original colours.
# This is what we need to create custom ggplot2 scales.
# Scales for ggplot2
# We can now create custom colour and fill scale functions for ggplot2.
# Colour scale constructor for codeclan colours
#' @param palette Character name of palette in example_palettes
#' @param discrete Boolean indicating whether color aesthetic is discrete or not
#' @param reverse Boolean indicating whether the palette should be reversed
#' @param ... Additional arguments passed to discrete_scale() or
#'            scale_color_gradientn(), used respectively when discrete is TRUE or FALSE
scale_color_codeclan <- function(palette = "main", discrete = TRUE, reverse = FALSE, ...) {
pal <- codeclan_pal(palette = palette, reverse = reverse)
if (discrete) {
discrete_scale("colour", paste0("example_", palette), palette = pal, ...)
} else {
scale_color_gradientn(colours = pal(256), ...)
}
}
#' Fill scale constructor for codeclan colours
#' @param palette Character name of palette in codeclan_palettes
#' @param discrete Boolean indicating whether colour aesthetic is discrete or not
#' @param reverse Boolean indicating whether the palette should be reversed
#' @param ... Additional arguments passed to discrete_scale() or
#'            scale_fill_gradientn(), used respectively when discrete is TRUE or FALSE
scale_fill_codeclan <- function(palette = "main", discrete = TRUE, reverse = FALSE, ...) {
pal <- codeclan_pal(palette = palette, reverse = reverse)
if (discrete) {
discrete_scale("fill", paste0("example_", palette), palette = pal, ...)
} else {
scale_fill_gradientn(colours = pal(256), ...)
}
}
# Each of these functions specifies a palette, whether the palette is being applied based on a discrete or numeric variable, whether to reverse the palette colors, and additional arguments to pass to the relevant ggplot2 function (which differs for discrete or numeric mapping).
# Examples.
#
# # Colour by discrete variable using default palette
# ggplot(iris, aes(Sepal.Width, Sepal.Length, color = Species)) +
#   geom_point(size = 4) +
#   scale_color_codeclan()
#
# # Colour by numeric variable with cool palette
# ggplot(iris, aes(Sepal.Width, Sepal.Length, color = Sepal.Length)) +
#   geom_point(size = 4, alpha = .6) +
#   scale_color_codeclan(discrete = FALSE, palette = "cool")
#
# # Fill by discrete variable with different palette + remove legend (guide)
# ggplot(mpg, aes(manufacturer, fill = manufacturer)) +
#   geom_bar() +
#   theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
#   scale_fill_codeclan(palette = "mixed", guide = "none")
source("data_wrangle.R")
library(shiny)
library(tidyverse)
library(ggthemes)
library(plotly)
library(forcats)
library(leaflet)
# Define server logic required to draw a histogram
shinyServer(function(input, output) {
filtered_data <- reactive({
first_filter <- ga_tsibble %>%
filter(date >= input$date_range[1], date <= input$date_range[2]) %>%
filter(scottish_city %in% input$location)
if (input$metrics == "total_sessions_per_day") {
first_filter <- first_filter %>%
mutate(
weekly_rolling_avg = slide_dbl(total_sessions_per_day, mean, .size = 7)
)
}
if (input$metrics == "total_users_per_day") {
first_filter <- first_filter %>%
mutate(
weekly_rolling_avg = slide_dbl(total_sessions_per_day, mean, .size = 7)
)
}
if (input$metrics == "total_da_apps") {
first_filter <- first_filter %>%
mutate(
weekly_rolling_avg = slide_dbl(total_da_apps, mean, .size = 7)
)
}
if (input$metrics == "total_prog_apps") {
first_filter <- first_filter %>%
mutate(
weekly_rolling_avg = slide_dbl(total_prog_apps, mean, .size = 7)
)
}
return(first_filter)
})
output$time_series <-
renderPlotly({
if (input$rolling_avg == "No") {
time_series <- filtered_data() %>%
ggplot() +
aes_string(x = "date", y = input$metrics, colour = "scottish_city") +
geom_line() +
scale_color_codeclan(reverse = TRUE) +
theme_minimal()
ggplotly(time_series)
}
else {
#browser()
time_series_ra <- filtered_data() %>%
ggplot() +
aes_string(x = "date", y = "weekly_rolling_avg", colour = "scottish_city") +
geom_line() +
scale_color_codeclan(reverse = TRUE) +
theme_minimal()
ggplotly(time_series_ra)
}
})
output$bar_graph <- renderPlot({
this_will_work <- syms(input$metrics)
filtered_data() %>%
group_by(scottish_city) %>%
summarise(total = sum(!!!this_will_work)) %>%
mutate(scottish_city = fct_reorder(scottish_city, total)) %>%
ggplot() +
aes_string(x = "scottish_city", y = "total", fill = "scottish_city") +
geom_col() +
coord_flip() +
labs(x = "City", y = case_when(
input$metrics == "total_sessions_per_day" ~ "Sessions",
input$metrics == "total_users_per_day" ~ "Users",
input$metrics == "total_da_apps" ~ "Data Analysis Applications",
input$metrics == "total_prog_apps" ~ "Programming Applications"
))  +
theme_minimal() +
theme(legend.position = "none") +
scale_fill_codeclan()
})
output$targets_graph <- renderPlot({
targets_plot <- ga_tsibble %>%
mutate(month = month(date)) %>%
index_by(month) %>%
summarise(monthly_metric = sum(get(input$metrics))) %>%
filter(month == input$month) %>%
ggplot() +
aes(x = input$month, y = monthly_metric, fill = scottish_city) +
geom_col(position = "dodge") +
theme_minimal() +
coord_flip() +
scale_fill_codeclan(reverse = TRUE)
if (input$metrics %in% c("total_da_apps", "total_prog_apps")) {
targets_plot +
geom_hline(yintercept = 25, colour = "red", linetype = "dotted", size = 3) +
geom_hline(yintercept = 10, colour = "blue", linetype = "dotted", size = 3)
}
else {
targets_plot
}
})
output$catchment_map <- renderLeaflet({
leaflet() %>%
addTiles() %>%
addRectangles(
lng1=-2.3150, lat1=55.4060,
lng2=-3.7393, lat2=56.6450,
fillColor = "transparent",
color = "#e7c27a") %>%
addRectangles(
lng1=-3.7393, lat1=54.6141,
lng2=-5.2901, lat2=56.6450,
fillColor = "transparent",
color = "#1a3644") %>%
addRectangles(
lng1=-0.2994, lat1=56.6450,
lng2=-9.1667, lat2=60.8532,
fillColor = "transparent",
color = "#5dbcd2")
})
})
runApp()
source('~/codeclan_work/3_r_shiny_dashboard_project/data_wrangle.R', echo=TRUE)
View(codeclan_palettes)
rm(codeclan_palettes)
rm(codeclan_colours)
rm(codeclan_cols)
rm(codeclan_pal)
rm(scale_color_codeclan)
rm(scale_fill_codeclan)
source('~/codeclan_work/3_r_shiny_dashboard_project/data_wrangle.R', echo=TRUE)
shiny::runApp()
source('~/codeclan_work/3_r_shiny_dashboard_project/data_wrangle.R', echo=TRUE)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
